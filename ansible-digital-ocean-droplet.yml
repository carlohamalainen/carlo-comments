---

- name: build binaries
  hosts: localhost
  connection: local

  tasks:
    - name: xcaddy install and build caddy
      shell: |
        go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest
        GOOS=linux GOARCH=amd64 xcaddy build --with github.com/caddy-dns/digitalocean

    - name: build carlo-comments
      shell: |
        GOOS=linux GOARCH=amd64 CC=x86_64-linux-musl-gcc CXX=x86_64-linux-musl-g++ CGO_ENABLED=1 go build -o carlo-comments-linux-amd64 main.go
      args:
        chdir: api

- name: Deploy
  hosts: digitalocean
  become: yes
  remote_user: root
  vars:
    app_home: /home/app
    # elm_deploy_dir: "{{ app_home }}/elm-admin"

  tasks:

    - name: Install required packages
      apt:
        name:
          - wget
          - curl
          - tar
          - zip
          - unzip
          - rsync
          - iftop
          - htop
          - btop
          - sqlite3
          - sqlite3-doc
          - sqlite-utils
          - sqlite3-tools
          - golang
          - musl
        state: present

    - name: Create app user
      user:
        name: app
        state: present
        shell: /bin/bash

    - name: Create logs directory for app user
      file:
        path: "{{ app_home }}/logs"
        state: directory
        owner: app
        group: app
        mode: 0700

    - name: Create .ssh directory for app user
      file:
        path: "{{ app_home }}/.ssh"
        state: directory
        owner: app
        group: app
        mode: 0700

    - name: Add SSH public key (laptop) to authorized_keys for app
      authorized_key:
        user: app
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
        state: present

    - name: Add SSH public key (iOS Prompt) to authorized_keys for root
      authorized_key:
        user: root
        key: "{{ lookup('file', '~/.ssh/prompt-ios.pub') }}"
        state: present

    - name: Add SSH public key (iOS Prompt) to authorized_keys for app
      authorized_key:
        user: app
        key: "{{ lookup('file', '~/.ssh/prompt-ios.pub') }}"
        state: present

    - name: Copy carlo-comments-linux-amd64
      copy:
        src: api/carlo-comments-linux-amd64
        dest: "{{ app_home }}/"
        owner: app
        group: app
        mode: 0755

    - name: Create carlo-comments systemd service file
      copy:
        content: |
          [Unit]
          Description=Carlo Comments Service
          After=network.target

          [Service]
          ExecStart=/home/app/carlo-comments-linux-amd64
          User=app
          Group=app
          Environment=LOG_DIRECTORY={{ lookup('env', 'LOG_DIRECTORY_DROPLET')}}
          Environment=CORS_ALLOWED_ORIGINS={{ lookup('env', 'CORS_ALLOWED_ORIGINS_DROPLET')}}
          Environment=HANDLER_TIMEOUT="5s"
          Environment=LIMITER_RATE=100
          Environment=LIMITER_BURST=50
          Environment=PORT={{ lookup('env', 'PORT')}}
          Environment=APP_NAME={{ lookup('env', 'APP_NAME')}}
          Environment=COMMENT_HOST={{ lookup('env', 'COMMENT_HOST')}}
          Environment=AWS_ACCESS_KEY_ID={{ lookup('env', 'AWS_ACCESS_KEY_ID')}}
          Environment=AWS_SECRET_ACCESS_KEY={{ lookup('env', 'AWS_SECRET_ACCESS_KEY')}}
          Environment=HMAC_SECRET={{ lookup('env', 'HMAC_SECRET')}}
          Environment=ADMIN_USER={{ lookup('env', 'ADMIN_USER')}}
          Environment=ADMIN_PASS={{ lookup('env', 'ADMIN_PASS')}}
          # Environment=S3_REGION={{ lookup('env', 'S3_REGION')}}
          # Environment=S3_BUCKET={{ lookup('env', 'S3_BUCKET')}}
          Environment=DYNAMODB_TABLE_NAME={{ lookup('env', 'DYNAMODB_TABLE_NAME')}}
          Environment=DYNAMODB_REGION={{ lookup('env', 'DYNAMODB_REGION')}}
          Environment=SES_IDENTITY={{ lookup('env', 'SES_IDENTITY')}}
          Environment=CF_SITE_KEY={{ lookup('env', 'CF_SITE_KEY')}}
          Environment=CF_SECRET_KEY={{ lookup('env', 'CF_SECRET_KEY')}}
          Restart=always
          RestartSec=10

          [Install]
          WantedBy=default.target
        dest: /etc/systemd/system/carlo-comments.service
        owner: root
        group: root
        mode: 0644

    - name: Stop carlo-comments service
      systemd:
        name: carlo-comments
        state: stopped
      ignore_errors: yes

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes
      become: yes

    - name: Enable carlo-comments service
      systemd:
        name: carlo-comments
        enabled: yes
      become: yes

    - name: Start carlo-comments service
      systemd:
        name: carlo-comments
        state: started
      become: yes

    - name: copy caddy binary to server
      copy:
        src: caddy
        dest: /usr/bin/caddy
        mode: 0755

    - name: Create caddy group
      group:
        name: caddy
        system: yes

    - name: Create caddy user
      user:
        name: caddy
        system: yes
        group: caddy
        home: /var/lib/caddy
        shell: /usr/sbin/nologin
        comment: "Caddy web server"

    - name: Create Caddy configuration directory
      file:
        path: /etc/caddy
        state: directory
        owner: root
        group: caddy
        recurse: yes

    - name: Create Caddyfile
      copy:
        content: |
          {{ lookup('env', 'API_HOST') }} {
              # route /admin/* {
              #     uri strip_prefix /admin
              #     root * /home/app/elm-admin
              #     file_server
              #     try_files {path} index.html
              # }

              route /v1/* {
                  reverse_proxy {{ lookup('env', 'PORT') }}
              }

              tls {
                  dns digitalocean {{ lookup('env', 'DO_DNS_TOKEN') }}

                  # ... solving challenges: presenting for challenge: could not determine zone for
                  # domain \"_acme-challenge.aaa.aaaaaaaa.aaa\": unexpected response code 'SERVFAIL'
                  # for _acme-challenge.aaa.aaaaaaaa.aaa.

                  # Tailscale DNS doesn't work with Lets Encrypt?

                  resolvers 8.8.8.8 8.8.4.4

              }
          }
        dest: /etc/caddy/Caddyfile
        owner: root
        group: root
        mode: 0644

    - name: Create Caddy systemd service
      get_url:
        url: https://raw.githubusercontent.com/caddyserver/dist/master/init/caddy.service
        dest: /etc/systemd/system/caddy.service

    - name: Stop Caddy service
      systemd:
        name: caddy
        state: stopped
      ignore_errors: yes

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes
      become: yes

    - name: Enable Caddy service
      systemd:
        name: caddy
        enabled: yes
      become: yes

    - name: Start Caddy service
      systemd:
        name: caddy
        state: started
      become: yes

    - name: Stop Promtail service
      systemd:
        name: promtail
        state: stopped
      ignore_errors: yes

    - name: Create Promtail directory
      file:
        path: "{{ app_home }}/promtail"
        state: directory
        owner: app
        group: app
        mode: 0755

    - name: Download Promtail zip file
      get_url:
        url: https://github.com/grafana/loki/releases/download/v2.9.10/promtail-linux-amd64.zip
        dest: "{{ app_home }}/promtail/promtail-linux-amd64.zip"
        owner: app
        group: app
        mode: 0755

    - name: Extract Promtail zip file
      unarchive:
        src: "{{ app_home }}/promtail/promtail-linux-amd64.zip"
        dest: "{{ app_home }}/promtail"
        remote_src: yes
        owner: app
        group: app
        mode: 0755

    - name: Copy Promtail configuration file
      copy:
        content: |
          server:
            http_listen_port: 9080
            grpc_listen_port: 0

          positions:
            filename: /home/app/promtail/positions.yaml

          clients:
            - url: {{ lookup('env', 'LOKI_URL') }}
              basic_auth:
                username: {{ lookup('env', 'LOKI_USER') }}
                password: {{ lookup('env', 'LOKI_API_TOKEN') }}

          scrape_configs:
            - job_name: system
              static_configs:
                - targets:
                    - localhost
                  labels:
                    job: carlo-comments-api
                    __path__: /home/app/logs/*.log

            - job_name: systemd
              journal:
                max_age: 12h
                labels:
                  job: systemd-journal
              relabel_configs:
                - source_labels: ['__journal__systemd_unit']
                  target_label: 'unit'
        dest: "{{ app_home }}/promtail/config.yaml"
        owner: app
        group: app
        mode: 0644

    - name: Create journal.d directory
      file:
        path: /etc/systemd/journald.conf.d
        state: directory
        owner: root
        group: app
        mode: 0700

    - name: Copy Promtail systemd logging configuration file
      copy:
        content: |
          [Journal]
          ForwardToSyslog=no
          ForwardToWall=no
          MaxLevelSyslog=debug
          MaxLevelConsole=debug
          MaxLevelWall=emerg

          [Match]
          _SYSTEMD_UNIT=carlo-comments.service

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/journald.conf.d/promtail.conf
        owner: root
        group: root
        mode: 0755

    - name: Create Promtail systemd service
      copy:
        content: |
          [Unit]
          Description=Promtail Service
          After=network.target

          [Service]
          ExecStart=/home/app/promtail/promtail-linux-amd64 --config.file=/home/app/promtail/config.yaml
          User=app
          Group=app
          Restart=always
          RestartSec=10

          [Install]
          WantedBy=default.target
        dest: /etc/systemd/system/promtail.service
        owner: root
        group: root
        mode: 0644

    - name: Create log_cleanup.service
      copy:
        content: |
          [Unit]
          Description=Delete old log files

          [Service]
          Type=oneshot
          User=app
          Group=app
          ExecStart=/usr/bin/find {{ app_home }}/logs -type f -mtime +30 -delete
        dest: /etc/systemd/system/log_cleanup.service
        owner: root
        group: root
        mode: 0644

    - name: Create log_cleanup.timer
      copy:
        content: |
          [Unit]
          Description=Run log_cleanup daily

          [Timer]
          OnCalendar=daily
          Persistent=true

          [Install]
          WantedBy=timers.target
        dest: /etc/systemd/system/log_cleanup.timer
        owner: root
        group: root
        mode: 0644

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes
      become: yes

    - name: Reload journald daemon
      systemd:
        daemon_reload: yes
      become: yes

    - name: Enable Promtail service
      systemd:
        name: promtail
        enabled: yes
      become: yes

    - name: Start Promtail service
      systemd:
        name: promtail
        state: started
      become: yes

    - name: Enable and start log_cleanup timer
      systemd:
        name: log_cleanup.timer
        enabled: yes
        state: started
      become: yes
